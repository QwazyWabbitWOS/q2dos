diff -u a/src/Makefile.dxe b/src/Makefile.dxe
--- a/src/Makefile.dxe	2016-03-27 07:11:10.000000000 +0300
+++ b/src/Makefile.dxe	2019-07-05 08:00:00.000000000 +0300
@@ -4,11 +4,14 @@
 
 # Makefile for fxMesa gl.dxe (DJGPP 2.04 and newer)
 
-.INTERMEDIATE: glide3x.dxe
-
 INCDIR = ../include
 LIBDIR = ../lib
+G2DIR  = ../glide
+G2LIB  = glide2x.dxe
 G3DIR  = ../glide3
+G3LIB  = glide3x.dxe
+#build for glide3x :
+GLIDE3 = 1
 
 GL_LIB = libgl.a
 GL_DXE = gl.dxe
@@ -16,14 +19,24 @@
 LIBNAME="fxMesa-v3.4"
 DXE_EXPORTS= -E _gl -X _gl_ -X _glb
 DXE_EXPORTS+= -E _fxMesa -E _fxQueryHardware -E _fxCloseHardware -E _fxGetScreenGeometry
-DXE_DEPS= -P glide3x.dxe
 
 CC = gcc
 AR = ar
 
-CFLAGS = -O2 -mtune=i586 -ffast-math -fomit-frame-pointer \
-	-DFX -DUSE_X86_ASM -DUSE_MMX_ASM -DUSE_3DNOW_ASM -DUSE_KATMAI_ASM -IFX/X86 \
-	-DFX_GLIDE3 -I$(G3DIR)/include -I. -I$(INCDIR)
+CFLAGS = -DFX
+ifneq ($(GLIDE3),1)
+GLIDEDIR=$(G2DIR)
+GLIDELIB=$(G2LIB)
+else
+GLIDEDIR=$(G3DIR)
+GLIDELIB=$(G3LIB)
+CFLAGS+= -DFX_GLIDE3
+endif
+DXE_DEPS= -P $(GLIDELIB)
+
+CFLAGS+= -O2 -mtune=i586 -ffast-math -fomit-frame-pointer \
+	-DUSE_X86_ASM -DUSE_MMX_ASM -DUSE_3DNOW_ASM -DUSE_KATMAI_ASM -IFX/X86 \
+	-I$(GLIDEDIR)/include -I. -I$(INCDIR)
 CFLAGS+= -DNDEBUG
 
 ARFLAGS = rus
@@ -169,7 +182,7 @@
 clean:
 	rm -f *.o X86/*.o FX/*.o FX/X86/*.o
 realclean: clean
-	rm -f $(LIBDIR)/*.a $(LIBDIR)/*.dxe
+	rm -f $(LIBDIR)/*.a $(LIBDIR)/*.dxe $(G2LIB) $(G3LIB)
 
 $(LIBDIR):
 	-mkdir $(LIBDIR)
@@ -178,13 +191,17 @@
 	$(AR) $(ARFLAGS) $@  $(OBJECTS)
 
 $(LIBDIR)/$(GL_DXE) $(LIBDIR)/$(GL_IMP): $(LIBDIR) $(OBJECTS)
-$(LIBDIR)/$(GL_DXE) $(LIBDIR)/$(GL_IMP): glide3x.dxe
+$(LIBDIR)/$(GL_DXE) $(LIBDIR)/$(GL_IMP): $(GLIDELIB)
 	-dxe3gen -o $(LIBDIR)/$(GL_DXE) -Y $(LIBDIR)/$(GL_IMP) -D $(LIBNAME) $(DXE_EXPORTS) $(DXE_DEPS) -U $(OBJECTS)
 
 # dxe3gen needs glide3x.dxe when generating the import lib libigl.a.
 # so we generate a dummy glide3x.dxe to cover common glide3x exports
 # and all possible libc dependencies:
+FX/glide2x_dxe.o: FX/glide2x_dxe.c
+	$(CC) -O0 -Wall -o $@ -c $<
 FX/glide3x_dxe.o: FX/glide3x_dxe.c
 	$(CC) -O0 -Wall -o $@ -c $<
-glide3x.dxe: FX/glide3x_dxe.o
-	-dxe3gen -o glide3x.dxe -E _gr -E _gu -U $<
+$(G2LIB): FX/glide2x_dxe.o
+	-dxe3gen -o $(G2LIB) -E _gr -E _gu -E _ConvertAndDownloadRle -U $<
+$(G3LIB): FX/glide3x_dxe.o
+	-dxe3gen -o $(G3LIB) -E _gr -E _gu -U $<
diff -u /dev/null b/src/FX/glide2x_dxe.c
--- /dev/null	2019-07-04 14:16:52.539343468 +0300
+++ b/src/FX/glide2x_dxe.c	2019-07-05 08:00:00.000000000 +0300
@@ -0,0 +1,210 @@
+/* C source for generating a dummy glide2x.dxe to be used when
+ * generating an import library for a dxe depending on glide2x.
+ *
+ * gcc -Wall -c glide2x.c -o glide2x.o
+ * dxe3gen -o glide2x.dxe -E _gr -E _gu -E _ConvertAndDownloadRle -U glide2x.o
+ */
+
+/* common gr and gu symbols exported by all
+ * sst1, sst96, cvg, and h3 glide2x.dxe:
+ */
+void ConvertAndDownloadRle () {}
+void grAADrawLine () {}
+void grAADrawPoint () {}
+void grAADrawPolygon () {}
+void grAADrawPolygonVertexList () {}
+void grAADrawTriangle () {}
+void grAlphaBlendFunction () {}
+void grAlphaCombine () {}
+void grAlphaControlsITRGBLighting () {}
+void grAlphaTestFunction () {}
+void grAlphaTestReferenceValue () {}
+void grBufferClear () {}
+void grBufferNumPending () {}
+void grBufferSwap () {}
+void grCheckForRoom () {}
+void grChromakeyMode () {}
+void grChromakeyValue () {}
+void grClipWindow () {}
+void grColorCombine () {}
+void grColorMask () {}
+void grConstantColorValue () {}
+void grConstantColorValue4 () {}
+void grCullMode () {}
+void grDepthBiasLevel () {}
+void grDepthBufferFunction () {}
+void grDepthBufferMode () {}
+void grDepthMask () {}
+void grDisableAllEffects () {}
+void grDitherMode () {}
+void grDrawLine () {}
+void grDrawPlanarPolygon () {}
+void grDrawPlanarPolygonVertexList () {}
+void grDrawPoint () {}
+void grDrawPolygon () {}
+void grDrawPolygonVertexList () {}
+void grDrawTriangle () {}
+void grErrorSetCallback () {}
+void grFogColorValue () {}
+void grFogMode () {}
+void grFogTable () {}
+void grGammaCorrectionValue () {}
+void grGlideGetState () {}
+void grGlideGetVersion () {}
+void grGlideInit () {}
+void grGlideSetState () {}
+void grGlideShamelessPlug () {}
+void grGlideShutdown () {}
+void grHints () {}
+void grLfbConstantAlpha () {}
+void grLfbConstantDepth () {}
+void grLfbLock () {}
+void grLfbReadRegion () {}
+void grLfbUnlock () {}
+void grLfbWriteColorFormat () {}
+void grLfbWriteColorSwizzle () {}
+void grLfbWriteRegion () {}
+void grRenderBuffer () {}
+void grResetTriStats () {}
+void grSplash () {}
+void grSstConfigPipeline () {}
+void grSstControl () {}
+void grSstIdle () {}
+void grSstIsBusy () {}
+void grSstOrigin () {}
+void grSstPerfStats () {}
+void grSstQueryBoards () {}
+void grSstQueryHardware () {}
+void grSstResetPerfStats () {}
+void grSstScreenHeight () {}
+void grSstScreenWidth () {}
+void grSstSelect () {}
+void grSstStatus () {}
+void grSstVideoLine () {}
+void grSstVidMode () {}
+void grSstVRetraceOn () {}
+void grSstWinClose () {}
+void grSstWinOpen () {}
+void grTexCalcMemRequired () {}
+void grTexClampMode () {}
+void grTexCombine () {}
+void grTexCombineFunction () {}
+void grTexDetailControl () {}
+void grTexDownloadMipMap () {}
+void grTexDownloadMipMapLevel () {}
+void grTexDownloadMipMapLevelPartial () {}
+void grTexDownloadTable () {}
+void grTexDownloadTablePartial () {}
+void grTexFilterMode () {}
+void grTexLodBiasValue () {}
+void grTexMaxAddress () {}
+void grTexMinAddress () {}
+void grTexMipMapMode () {}
+void grTexMultibase () {}
+void grTexMultibaseAddress () {}
+void grTexNCCTable () {}
+void grTexSource () {}
+void grTexTextureMemRequired () {}
+void grTriStats () {}
+void gu3dfGetInfo () {}
+void gu3dfLoad () {}
+void guAADrawTriangleWithClip () {}
+void guAlphaSource () {}
+void guColorCombineFunction () {}
+void guDrawPolygonVertexListWithClip () {}
+void guDrawTriangleWithClip () {}
+void guEncodeRLE16 () {}
+void guEndianSwapBytes () {}
+void guEndianSwapWords () {}
+void guFbReadRegion () {}
+void guFbWriteRegion () {}
+void guFogGenerateExp () {}
+void guFogGenerateExp2 () {}
+void guFogGenerateLinear () {}
+void guFogTableIndexToW () {}
+void guMovieSetName () {}
+void guMovieStart () {}
+void guMovieStop () {}
+void guMPDrawTriangle () {}
+void guMPInit () {}
+void guMPTexCombineFunction () {}
+void guMPTexSource () {}
+void guTexAllocateMemory () {}
+void guTexChangeAttributes () {}
+void guTexCombineFunction () {}
+void guTexCreateColorMipMap () {}
+void guTexDownloadMipMap () {}
+void guTexDownloadMipMapLevel () {}
+void guTexGetCurrentMipMap () {}
+void guTexGetMipMapInfo () {}
+void guTexMemQueryAvail () {}
+void guTexMemReset () {}
+void guTexSource () {}
+
+/* external libc symbols required by all of
+ * sst1, sst96, cvg, and h3 glide2x.dxe:
+ */
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <math.h>
+#include <assert.h>
+#include <errno.h>
+#include <unistd.h>
+#include <time.h>
+#include <signal.h>
+#include <dos.h>
+#include <dpmi.h>
+#include <sys/nearptr.h>
+#include <setjmp.h>
+#include <crt0.h>
+long EXTSYM0000 = (long) &_crt0_startup_flags;
+long EXTSYM0001 = (long) &__dj_assert;
+long EXTSYM0002 = (long) &__djgpp_base_address;
+long EXTSYM0003 = (long) &__djgpp_nearptr_disable;
+long EXTSYM0004 = (long) &__djgpp_nearptr_enable;
+long EXTSYM0005 = (long) &__dj_stderr;
+long EXTSYM0006 = (long) &__dj_stdout;
+long EXTSYM0007 = (long) &__dpmi_free_physical_address_mapping;
+long EXTSYM0008 = (long) &__dpmi_physical_address_mapping;
+long EXTSYM0009 = (long) &atof;
+long EXTSYM0010 = (long) &atoi;
+long EXTSYM0011 = (long) &atol;
+long EXTSYM0012 = (long) &clock;
+long EXTSYM0013 = (long) &exit;
+long EXTSYM0014 = (long) &fclose;
+long EXTSYM0015 = (long) &fflush;
+long EXTSYM0016 = (long) &fgetc;
+long EXTSYM0017 = (long) &fgets;
+long EXTSYM0018 = (long) &fopen;
+long EXTSYM0019 = (long) &fprintf;
+long EXTSYM0020 = (long) &fread;
+long EXTSYM0021 = (long) &free;
+long EXTSYM0022 = (long) &fwrite;
+long EXTSYM0023 = (long) &getc;
+long EXTSYM0024 = (long) &getenv;
+long EXTSYM0025 = (long) &int86;
+long EXTSYM0026 = (long) &longjmp;
+long EXTSYM0027 = (long) &malloc;
+long EXTSYM0028 = (long) &memcpy;
+long EXTSYM0029 = (long) &memset;
+long EXTSYM0030 = (long) &pow;
+long EXTSYM0031 = (long) &printf;
+long EXTSYM0032 = (long) &putenv;
+long EXTSYM0033 = (long) &puts;
+long EXTSYM0034 = (long) &setjmp;
+long EXTSYM0035 = (long) &signal;
+long EXTSYM0036 = (long) &sprintf;
+long EXTSYM0037 = (long) &sscanf;
+long EXTSYM0038 = (long) &strcat;
+long EXTSYM0039 = (long) &strchr;
+long EXTSYM0040 = (long) &strcmp;
+long EXTSYM0041 = (long) &strcpy;
+long EXTSYM0042 = (long) &strncat;
+long EXTSYM0043 = (long) &strncpy;
+long EXTSYM0044 = (long) &strtok;
+long EXTSYM0045 = (long) &strtoul;
+long EXTSYM0046 = (long) &usleep;
+long EXTSYM0047 = (long) &vfprintf;
+long EXTSYM0048 = (long) &vsprintf;
+
